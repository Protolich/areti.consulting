/*
# Settings (_settings)
*/

/*
## Variables

### General

$phi: 1.618033988749 - Golden ratio
*/
$phi: 1.618033988749;

/*
### Colours

<span style="color: #333">$colour-base - #333</span> <span style="background: #333; color: #FFF;">&nbsp;$colour-base - #333&nbsp;</span>

<span style="color: #339">$colour-highlight - #339</span> <span style="background: #339; color: #FFF;">&nbsp;$colour-highlight - #339&nbsp;</span>

<span style="color: #339">$colour-link - #339</span> <span style="background: #339; color: #FFF;">&nbsp;$colour-link - #339&nbsp;</span>
*/
$colour-base: 		#333;
$colour-highlight: 	#636;
$colour-link: 		#339;

/*
### Fonts

$font-size - 13

$line-height - 1.4

<span style="font-family: sans-serif;">$font-base - sans-serif</span>

<span style="font-family: sans-serif;">$font-header - sans-serif</span>
*/
$font-size: 	13;
$line-height: 	1.4;

$font-base: 	'Open Sans', sans-serif;
$font-header: 	'Cinzel Decorative', serif;


/*
### Layout

$width - 960

$columns - 24

$gutter - 12
*/
$width: 	960;
$columns: 	24;
$gutter: 	12;


/*
## Functions

### em($size: $font-size, $context: $fs)

Will convert a pixel based size to an em value.
First value is the target size, the second value is the font-size of the context it is in.

Examples:
`em(26)` // 2em if base font-size is 13px
`em(18, 12)` // 1.5em
*/
@function em($size: $font-size, $context: $font-size) {
	@return $size/$context + em;
}

/*
### lh($size: $font-size, $context: $fs)

Will provide the same function as 'em' above buth without appending 'em' to the result.
This makes it more suitable to use as a line-height value.

Examples:
`lh(26)` // 2 if base font-size is 13px
`lh(18, 12)` // 1.5
*/
@function lh($size: $font-size, $context: $font-size) {
	@return $size/$context;
}

/*
## Mixins

Mixins must to be called using @include (scss) or + (sass)
*/

/*
### keyframes($name)

Set animation keyframes over multiple browser extensions

<pre>
.box {
	@include keyframes(my-animation) {
		0% { opacity: 0; }
		100% { opacity: 1; }
	}
}
</pre>

Outputs:
<pre>
.box {
	@-webkit-keyframes my-animation {
	  0%   { opacity: 0; }
	  100% { opacity: 1; }
	}
	@-moz-keyframes my-animation {
	  0%   { opacity: 0; }
	  100% { opacity: 1; }
	}
	@-ms-keyframes my-animation {
	  0%   { opacity: 0; }
	  100% { opacity: 1; }
	}
	@-o-keyframes my-animation {
	  0%   { opacity: 0; }
	  100% { opacity: 1; }
	}
	@keyframes my-animation {
	  0%   { opacity: 0; }
	  100% { opacity: 1; }
	}
}
</pre>
*/
@mixin keyframes($name) {
	@-webkit-keyframes #{$name} {
		@content
	}
	@-moz-keyframes #{$name} {
		@content
	}
	@-ms-keyframes #{$name} {
		@content
	}
	@-o-keyframes #{$name} {
		@content
	}
	@keyframes #{$name} {
		@content
	}
}

/*
### max($maxwidth: $width)

A simple max-width media query

<pre>
div {
	@include max(768px) {
		display: none;
	}
}
</pre>

Outputs:
<pre>
@media (max-width: 768px) {
	div {
		display: none;
	}
}
</pre>
*/
@mixin max($maxwidth: $width) {
	@media (max-width: $maxwidth) {
		@content
	}
}

/*
### min($minwidth: $width)

A simple min-width media query

<pre>
div {
	@include min(768px) {
		display: block;
	}
}
</pre>

Outputs:
<pre>
@media (min-width: 768px) {
	div {
		display: block;
	}
}
</pre>
*/
@mixin min($minwidth: $width) {
	@media (min-width: $minwidth) {
		@content
	}
}

/*
### pixel-ratio($pixelratio: 2, $basedpi: 96)

A simple pixel-ratio media query

$basedpi is used for fine control over the dpi query value

<pre>
div {
	@include pixel-ratio {
		background-image: url(image@2x.png);
	}
}
</pre>

Outputs:
<pre>
@media
	(-webkit-min-device-pixel-ratio: 2),
	(   min--moz-device-pixel-ratio: 2),
	(     -o-min-device-pixel-ratio: 2/1),
	(        min-device-pixel-ratio: 2),
	(                min-resolution: 192dpi),
	(                min-resolution: 2dppx) {
		div {
			background-image: url(image@2x.png);
		}
	}
</pre>
*/
@mixin pixel-ratio($pixelratio: 2, $basedpi: 96) {
	@media
		(-webkit-min-device-pixel-ratio: $pixelratio),
	  	(   min--moz-device-pixel-ratio: $pixelratio),
	  	(     -o-min-device-pixel-ratio: $pixelratio/1),
	  	(        min-device-pixel-ratio: $pixelratio),
	  	(                min-resolution: #{$basedpi*$pixelratio}dpi),
	  	(                min-resolution: #{$pixelratio}dppx) {
			@content
		}
}

/*
### Placeholders
*/
@mixin placeholder {
	:-moz-placeholder {
		@content
	}
	::-moz-placeholder {
		@content
	}
	::-webkit-input-placeholder {
		@content
	}
	:-ms-input-placeholder {
		@content
	}
}
